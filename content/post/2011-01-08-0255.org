#+title: Xcodeのプリプロセッサマクロ
#+date: 2011-01-08T20:12:42+09:00
#+draft: false
#+tags: 過去記事インポート

<p>「ある条件下では特定のコード群は処理に加わらせない」といった場合、方法の1つとしてプリプロセッサにマクロを指定するやり方が挙げられます。</p><!--more--><p>Xcodeで行う場合、プロジェクト設定にある項目「プリプロセッサマクロ」で指定します。(実際に探す際は、同ウィンドウ内にある検索バーに「プリプロセス」などと入れて検索することをお勧めします。)</p><blockquote>Xcodeメニューのプロジェクト &gt; プロジェクト設定を変更 &gt; GCC 4.2 - プリプロセスのプリプロセッサマクロ</blockquote><p>[caption id="attachment_3775" align="aligncenter" width="464" caption="GCC 4.2 - プリプロセス"]<a rel="attachment wp-att-3775" href="http://hiroakit.com/archives/3772/figure1"><img class="size-full wp-image-3775	" title="GCC 4.2 - プリプロセス" src="http://hiroakit.com/photo/figure1.png" alt="" width="464" height="419"></a>[/caption]</p><h3>プロジェクトの項目「プリプロセッサマクロ」を設定</h3><p>例えば、下のコードのようにDebugしているときにNSLogを出力するマクロ"DEBUG" があるとき、ビルド構成Debugのプリプロセッサマクロに DEBUG = 1 と入力します。(上図参照)</p><pre>#ifdef DEBUG  NSLog(@"ビルド構成:デバッグ");#endif</pre><p>以上で設定は完了です。</p><h3>サンプルコードとその結果</h3><p>以下のコードは、上述した内容でプリプロセッサマクロが動作しているのか確認するために用意した簡易的なものです。</p><pre>#import &lt;Foundation/Foundation.h&gt;int main (int argc, const char * argv[]) {  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];#ifdef DEBUG  NSLog(@"ビルド構成:デバッグ");  NSLog(@"%d 行目",__LINE__);			 // 行数を表示  NSLog(@"%s メソッド",__FUNCTION__);		// メソッド名を表示  NSLog(@"%s に記述あり",__FILE__);		 // ファイル名(フルパス)を表示#else if	NSLog(@"ビルド構成:リリース");#endif  [pool drain];  return 0;}</pre><ul>	<li>ビルド構成をDebugにしたときのコンソールの出力結果</li><blockquote>ビルド構成:デバッグ13 行目main メソッド/Users/hiroaki/develop/Macro/Macro.m に記述あり</blockquote>	<li>ビルド構成をReleaseにしたときのコンソールの出力結果</li><blockquote>ビルド構成:リリース</blockquote></ul>
